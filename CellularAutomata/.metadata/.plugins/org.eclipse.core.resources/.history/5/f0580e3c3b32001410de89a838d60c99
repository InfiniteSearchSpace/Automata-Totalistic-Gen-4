import java.util.Random;


public class automataLib {
	//parent components
	Universe u;
	Main m;
	
	//for random functions
	Random r = new Random();
	
	//used to define neighbourhoods
	neighbours n; 
	
	//Global vars that hold the size of the world array
	int m_xSize;
	int m_ySize;
	
	int[][] instructions; //holds the actions to perform

	int[][] arTF_Ruleset;
	
	//constructor
	public automataLib(Main mm, int xSize, int ySize) {
		m = mm;
		n= new neighbours(0);
		m_xSize=xSize;
		m_ySize=ySize;
	}
	
	//takes a universe and the dataSources object for writing
	public void setTargetUni(Universe uu) {
		u=uu;
	}

	
	/*  = = = = = = = = = = = = = = = = = = = = 
	 *  = = = = = = = = = = = = = = = = = = = = 
	 * 		 	Value   Read/Write
	 *  = = = = = = = = = = = = = = = = = = = = 
	 *  = = = = = = = = = = = = = = = = = = = = 
	 */ 
	
	//takes array co-ord, modification int, array param length, and returns wrap position.
    public int getWrap(int val, int mod, int len) { 
    	if((val+mod) % len < 0) {
    		return len+((val+mod) % len);
    	} else {
    		return (val+mod) % len;
    	}
    }

    //sets the specified cell to specified value
    public void placeval(int xx, int yy, int zz, int rand, int v) { 
    	if(r.nextInt(rand) == 0) {
    		u.universe[xx][yy][zz] = v;
    	}
    }
    
    public int getval(int xx, int yy, int zz, int rand, int v) { 
    	if(r.nextInt(rand) == 0) {
    		return u.universe[xx][yy][zz];
    	} else {
    		return 0;
    	}
    }
	
  //draws a line of val. Can be solid or rand, can be veto'd, optional overwrite with 0.    
   public void plcLn(int xx, int yy, int zz, int rand, int xnullx, int val, int veto, int placeO, int len, int blockSize, int toolVar) {
    	
    	if(r.nextInt(veto) == 0) { //chance to not write the line
		    for(int i = 1; i < ((len-xx)/2)+1; i++) {
		    	if(r.nextInt(rand) == 0) {
		    		placeval((xx+i)+((blockSize-1)/2), yy+((blockSize-1)/2), zz, 1, val+r.nextInt(toolVar));
		    	} else if(placeO > 0) {placeval((xx+i)+((blockSize-1)/2)-1, yy+((blockSize-1)/2), zz, 1, 0);}
		    }
    	}
    	
    }
    
    public void plcDataLn(int xx, int yy, int zz, int rand, int xnullx, int val, int veto, int placeO, int len, int blockSize, int toolVar, dataSources d, int softwrite) {
    	
    	if(r.nextInt(veto) == 0) { //chance to not write the line
		    for(int i = 1; i < ((len-xx)/2)+1; i++) {
		    	val = d.readNext();
		    	if(val != 0 || softwrite == 0) { //softwrite
			    	if(r.nextInt(rand) == 0) {
			    		placeval((xx+i)+((blockSize-1)/2), yy+((blockSize-1)/2), zz, 1, val+r.nextInt(toolVar));
			    	} else if(placeO > 0) {placeval((xx+i)+((blockSize-1)/2)-1, yy+((blockSize-1)/2), zz, 1, 0);}
		    	}
		    }
    	}
    	
    }
    
    
    public int[] getDataLn(int xx, int yy, int zz, int rand, int xnullx, int val, int veto, int placeO, int len, int blockSize, int toolVar) {
    	
    	int[] dataLine = new int[blockSize]; 
    	
    	if(r.nextInt(veto) == 0) { //chance to not get the line
		    for(int i = 1; i < ((len-xx)/2)+1; i++) {
		    	int dataInt = 0;
		    	
		    	if(r.nextInt(rand) == 0) {
		    		dataInt = getval((xx+i)+((blockSize-1)/2), yy+((blockSize-1)/2), zz, 1, val+r.nextInt(toolVar));
		    	} else if(placeO > 0) {dataInt = getval((xx+i)+((blockSize-1)/2)-1, yy+((blockSize-1)/2), zz, 1, 0);}
		    	
		    	dataLine[i-1]=dataInt;
		    }
    	}
    	
    	return dataLine;
    	
    }
    
    
    //with chance, set cell to val 
    public void seed(int xx, int yy, int zz, int rand, int xnullx, int val){ //chance to seed location
    	if(r.nextInt(rand) == 0) {placeval(xx, yy, zz, 1, val);}
    }
    
    //with chance, reset pixel to val, applies to whole universe
    public void seedAll(int rand, int val, int rndVar){
    	
    	for(int i = 0; i < u.universe.length; i++) {
			for (int j = 0; j < u.universe[0].length; j++) {
				for (int k = 0; k < u.universe[0][0].length; k++) {
			    	seed(i,j,k,rand,-1,val+r.nextInt(rndVar));
				}
			}
    	}
    } 
    
    //chance to seed every pixel on this layer
    public void seedZ(int rand, int zz, int val, int rndVar){ 
    	for(int i = 0; i < u.universe.length; i++) {
			for (int j = 0; j < u.universe[0].length; j++) {
			    seed(i,j,zz,rand, 0, val+r.nextInt(rndVar));
			}
    	}
    }

    
	/*  = = = = = = = = = = = = = = = = = = = = 
	 *  = = = = = = = = = = = = = = = = = = = = 
	 * 		 	Neighbourhood Checks
	 *  = = = = = = = = = = = = = = = = = = = = 
	 *  = = = = = = = = = = = = = = = = = = = = 
	 */ 

	
	//counts the neighbours not equal to val
	public int nbrCountNotVal(int xx, int yy, int zz, int val){
		int isOne = 0;

		for(int i = 0; i < n.NBH.length; i++) {
			if(u.snapshotUniverse[getWrap(xx, n.NBH[i][0], u.universe.length)][getWrap(yy, n.NBH[i][1], u.universe[0].length)][getWrap(zz, n.NBH[i][2], u.universe[0][0].length)] != val) {isOne++;}
		}
		
		return isOne;
	}
	 
	 
	
	/*  = = = = = = = = = = = = = = = = = = = = 
	 *  = = = = = = = = = = = = = = = = = = = = 
	 * 		 	Automata
	 *  = = = = = = = = = = = = = = = = = = = = 
	 *  = = = = = = = = = = = = = = = = = = = = 
	 */ 
	
	
	/*		Parameters
	 * Default: xx, yy, zz
	 * RandomProc
	 * Threshold
	 * 
	 * 
	 */

	
	public void arrayRuleIncrement(int xx, int yy, int zz){

		n.setNbrhood(4);
		
		int isOne = nbrCountNotVal(xx,yy,zz,0);
		
		for(int i = 0; i < arTF_Ruleset.length; i++) {
			if(isOne >= arTF_Ruleset[i][0] && isOne <= arTF_Ruleset[i][1]) {
				if(arTF_Ruleset[i][2] != 0) {
					if(arTF_Ruleset[i][3] != -1) {
						if(u.snapshotUniverse[xx][yy][zz] == arTF_Ruleset[i][3]) {u.universe[xx][yy][zz] = arTF_Ruleset[i][2];}
					} else {
						u.universe[xx][yy][zz] += arTF_Ruleset[i][2];
					} 
				} else {
					u.universe[xx][yy][zz]=0;
				}
			}
		}
	}
		
	/////////////////////////////////////////////
	/////////Select Instruction to run///////////
	/////////////////////////////////////////////
																								  //Random, Threshold, Value
	public void readInstructions(int[] ins, int xx, int yy, int zz) {
				
		int insInstr = ins[0];
		int insZlay = ins[1];
		int insPar2 = ins[2];
		int insPar3 = ins[3];
		int insPar4 = ins[4];

		//		Utility functions / other
		if(insInstr == -1 && (insZlay == zz || insZlay == -1)) {seed(xx, yy, zz, 						insPar2, insPar3, insPar4);}
		//Rules that can have their rules customised
		if(insInstr == 89 && (insZlay == zz || insZlay == -1)) {arrayRuleIncrement(xx,yy,zz 			);}

	}

	
}
