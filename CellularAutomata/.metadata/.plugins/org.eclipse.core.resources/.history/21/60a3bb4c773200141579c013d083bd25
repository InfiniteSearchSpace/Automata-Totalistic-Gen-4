
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.BorderFactory;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JMenuBar;
 
public class jMenuEditor implements ActionListener {

	ToggleFrame TF;
	ml ML;
	automataLib a;
	
	int[][] nbrhood;
    //constructor, captures UI controller: ml
    public jMenuEditor(ToggleFrame TFrame, ml mML, automataLib aa) {
    	ML = mML;
    	TF = TFrame;
        TF.setJMenuBar(createMenuBar());
        a=aa;
        //System.out.println(a);
	}

	public JMenuBar createMenuBar() {

		JMenuBar menuBar;
        JMenu menu;
        JMenuItem menuItem;
        //JMenu submenu;
        
        //menu bar
        menuBar = new JMenuBar();
        
        //create new menu
        menu = new JMenu("Clipboard");
        menu.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        menuBar.add(menu);
        
        //Populate menu
        menuItem = new JMenuItem("--> Paste From Clip");
        menuItem.addActionListener(this);
        menu.add(menuItem);
        
        menuItem = new JMenuItem("Copy To Clip -->");
        menuItem.addActionListener(this);
        menu.add(menuItem); 
        
        menu = new JMenu("Other");
        menu.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        menuBar.add(menu);
        
        //Populate menu
        menuItem = new JMenuItem("--> Get Neighbourhood");
        menuItem.addActionListener(this);
        menu.add(menuItem);
        
        menuItem = new JMenuItem("--> Get Rule");
        menuItem.addActionListener(this);
        menu.add(menuItem);
        
        menu.addSeparator();
        
        menuItem = new JMenuItem("Set Neighbourhood -->");
        menuItem.addActionListener(this);
        menu.add(menuItem);
        
        menuItem = new JMenuItem("Set Rule -->");
        menuItem.addActionListener(this);
        menu.add(menuItem);
        
        
        
        return menuBar;
    }
 
    public void actionPerformed(ActionEvent e) {
    	
        JMenuItem source = (JMenuItem)(e.getSource());
  
        if(source.getText() == "--> Get Neighbourhood") 		{
        	nbrhood = a.n.NBH;
        	int centCell = ((TF.pp.length/2)-1);
        	if(TF != null) {
        		for(int i = 0; i < nbrhood.length; i++){
        			TF.pp[nbrhood[i][0]+centCell][nbrhood[i][1]+centCell].setVal(1);
        		}
        		
        		TF.pp[centCell][centCell].setVal(-1);
        		
        	} 
        	
        	TF.updatePanelColors();
		} 	
        
        if(source.getText() == "--> Get Rule") 		{
        	nbrhood = a.n.NBH;
        	int centCell = ((TF.pp.length/2)-1);
        	if(TF != null) {
        		for(int i = 0; i < nbrhood.length; i++){
        			TF.pp[nbrhood[i][0]+centCell][nbrhood[i][1]+centCell].setVal(1);
        		}
        		
        		TF.pp[centCell][centCell].setVal(-1);
        		
        	} 
        	
        	TF.updatePanelColors();
		} 
        
        if(source.getText() == "--> Paste From Clip") 		{
        	if(TF != null) {
        		int[][][] intAr = ML.d.getArray();
        		for(int i = 0; i < TF.pp.length; i++){
        			for(int j = 0; j < TF.pp[i].length; j++){
            			TF.pp[j][i].setVal(intAr[j][i][0]);
            		}
        		}
        		
        	} else {
        		//System.out.println("NULL POINTER EXCEPTION");
        	}
        	TF.updatePanelColors();
		} 	
        
        
        if(source.getText() == "Copy To Clip -->") 		{
        	if(TF != null) {
        		int[][][] intAr = new int[TF.pp.length][TF.pp[0].length][1];
        		for(int i = 0; i < TF.pp.length; i++){
        			for(int j = 0; j < TF.pp[i].length; j++){
            			intAr[j][i][0] = TF.pp[j][i].val;
            		}
        		}
        		
        		ML.d.setArray(intAr);
        		
        	} else {
        		//System.out.println("NULL POINTER EXCEPTION");
        	}
		} 	

        if(source.getText() == "Set Neighbourhood -->") 		{
        	if(TF != null) {
        		int[][][] intAr = new int[TF.pp.length][TF.pp[0].length][1];
        		for(int i = 0; i < TF.pp.length; i++){
        			for(int j = 0; j < TF.pp[i].length; j++){
            			intAr[j][i][0] = TF.pp[j][i].val;
            		}
        		}
        		
        		//get the centre cell (-1)
        		int ii=0; 
        		int jj=0;
        		
        		for(int i = 0; i < TF.pp.length; i++){
        			for(int j = 0; j < TF.pp[i].length; j++){
            			if(intAr[i][j][0] == -1) {ii=i;jj=j;}
            		}
        		}
        		
        		//System.out.println("i:"+ii+" j:" +jj);
        		
        		//get number of == 1 cells
        		int nbrCount = 0;
        		for(int i = 0; i < TF.pp.length; i++){
        			for(int j = 0; j < TF.pp[i].length; j++){
            			if(intAr[j][i][0] == 1) {
            				nbrCount++;
            			}
            		}
        		}
        		
        		//get 1-cell locations
        		nbrhood = new int[nbrCount][3];
        		int placedNbr = nbrCount;
        		
        		for(int i = 0; i < TF.pp.length; i++){
        			for(int j = 0; j < TF.pp[i].length; j++){
            			if(intAr[i][j][0] == 1) {
            				nbrhood[nbrCount-placedNbr][0]=i;
            				nbrhood[nbrCount-placedNbr][1]=j;
            				nbrhood[nbrCount-placedNbr][2] = 0;
            				placedNbr--;
            			}
            		}
        		}
        		        		
        		//transform cells by (-ii, -jj)
        		for(int i = 0; i < nbrhood.length; i++){
        			nbrhood[i][0]-=ii;
        			nbrhood[i][1]-=jj;
        		}

        		a.n.NBH = nbrhood;
        		
        		
        	} else {
        		//System.out.println("NULL POINTER EXCEPTION");
        	}
        }

        if(source.getText() == "Set Rule -->") 		{
        	
        	/*
        	 *  [ int Start, int End, int val, int testforval]
        	 * 
         	 */
        	
        	
        	
        	if(TF != null) {
        		int[][][] intAr = new int[TF.pp.length][TF.pp[0].length][1];
        		for(int i = 0; i < TF.pp.length; i++){
        			for(int j = 0; j < TF.pp[i].length; j++){
            			intAr[j][i][0] = TF.pp[j][i].val;
            		}
        		}
        		
        		int ii=0, jj=0;
        		int ruleLen=0;
        		
        		for(int i = 0; i < TF.pp.length; i++){
        			for(int j = 0; j < TF.pp[i].length; j++){
            			if(intAr[i][j][0] == -2) {ii=i; jj=j;}
            		}
        		}
        		
        		for(int i = 0; i < TF.pp.length; i++){
        			for(int j = 0; j < TF.pp[i].length; j++){
            			if(intAr[i][j][0] == -3) {ruleLen = (j-jj)-1;}
            		}
        		}
        		
        		int[][] arRule = new int[ruleLen][5];
        		
        		
        		
        		for(int i = 0; i < ruleLen; i++) {
        			String dbgstr = "";
        			for(int j = 0; j < 4; j++) {
        				arRule[i][j] = intAr[ii+j][jj+i+1][0];
        				dbgstr+=(arRule[i][j]) + ",";
        			}
        			//System.out.println(dbgstr);
        		}
        		
        		a.arTF_Ruleset = arRule;
        		
        		
        		
        		
        	} else {
        		//System.out.println("NULL POINTER EXCEPTION");
        	}
        }
        
        
    }
 
    
    
    
    
    
    
}